void execute_command(t_cmd *cmd, int num_pipes, char **envp) 
{
    t_exe exe;
    int pipe_fds[num_pipes][2];
    int i;
    
    set_struct(&exe, num_pipes);
    open_pipes(0, num_pipes, pipe_fds);
    i = 0;
    while (i <= num_pipes) 
    {   
        checking_redir(cmd, i);
        if (cmd->syntax_err == 1)
            return ; 
        exe.pid = fork();
        error_fork(exe.pid);
        if (exe.pid == 0) 
        {
            // Child process
            // Redirect input
            redirect_input(cmd, &exe, i, pipe_fds);
            /* if (ft_strcmp(cmd->box[0][0], "<<") == 0) 
            {   
                exe.input_fd = open("heredoc_tmp.txt", O_RDONLY);
                cmd->f->write_in = 1;
                if (exe.input_fd == -1) {
                    perror("open");
                    exit(EXIT_FAILURE);
                }
            }
            if (i == 0 && cmd->input != NULL) 
            {
                exe.input_fd = open(cmd->input, O_RDONLY);
                if (exe.input_fd == -1) {
                    perror("open");
                    exit(EXIT_FAILURE);
                }
            } else if (i > 0 && cmd->f->write_in == 0) 
            {
                close(pipe_fds[i - 1][1]);
                exe.input_fd = pipe_fds[i - 1][0];
            }
            dup2(exe.input_fd, STDIN_FILENO);
            close(exe.input_fd); */
            // Redirect output
            redirect_output(cmd, &exe, i, pipe_fds);
            /* if (i == exe.last_command_index && cmd->output != NULL) 
            {
                if (cmd->f->append_out)
                    exe.output_fd = open(cmd->output, O_WRONLY | O_CREAT | O_APPEND, 0644);
                else
                    exe.output_fd = open(cmd->output, O_WRONLY | O_CREAT | O_TRUNC, 0644);
                if (exe.output_fd == -1) {
                    perror("open");
                    exit(EXIT_FAILURE);
                }
            }
            else if (i == exe.last_command_index && cmd->output == NULL)
            {   
                exe.output_fd = exe.original_stdout;
            }
            else if (i < num_pipes) 
            {
                close(pipe_fds[i][0]);
                exe.output_fd = pipe_fds[i][1];
            }
            dup2(exe.output_fd, STDOUT_FILENO);
            close(exe.output_fd); */
            inter_exe(cmd, envp, i); // Execute the command
            if (i > 0) 
                close(pipe_fds[i - 1][0]);
            if (i < num_pipes) 
                close(pipe_fds[i][1]);
        } 
        else // Parent process
            close_pipes(i, pipe_fds);
        i++;
    }
    // Wait for all child processes to complete
    for (int i = 0; i <= num_pipes; i++) {
        wait(NULL);
    }
    // Restore the original stdout
    dup2(exe.original_stdout, STDOUT_FILENO);
    close(exe.original_stdout);
}